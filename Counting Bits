Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.

 

Example 1:

Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10
Example 2:

Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 


class Solution {
    public int[] countBits(int n) {
        
        //edge cases

        if(n==0)
            return new int[]{0};
	
	if(n==1)
		return new int[]{0,1};

        int[] nums=new int[n+1];
	//initial values for n>1
	nums[1]=1;

	for(int i=2;i<=n;i++)
	{
		//if the number has a remainder 0, the number of 1s is the same as the 1s of its quotient. example n=6, 6%2=0, 6/2=3 so nums[6]=nums[3] 
		if(i%2==0)
			nums[i]=nums[i/2];
		//otherwise, the number of 1s is the same as the number of 1s of its quotient + the 1s of its remainder. example n=9, 9%2=1, 9/2=4 so nums[9]=nums[4]+nums[1];
		else
			nums[i]=nums[i/2]+nums[i%2];
	}
        return nums;
        
    }
}
