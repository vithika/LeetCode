A decimal number is called deci-binary if each of its digits is either 0 or 1 without any leading zeros. For example, 101 and 1100 are deci-binary, while 112 and 3001 are not.

Given a string n that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to n.

 

Example 1:

Input: n = "32"
Output: 3
Explanation: 10 + 11 + 11 = 32
Example 2:

Input: n = "82734"
Output: 8
Example 3:

Input: n = "27346209830709182346"
Output: 9
 

class Solution {
    
    public int minPartitions(String n) 
    {
          if(n.contains("9")) return 9;
        if(n.contains("8")) return 8;
        if(n.contains("7")) return 7;
        if(n.contains("6")) return 6;
        if(n.contains("5")) return 5;
        if(n.contains("4")) return 4;
        if(n.contains("3")) return 3;
        if(n.contains("2")) return 2;
        if(n.contains("1")) return 1;
        else return 0;
    }
}
